//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.h files to make changes.           ** */
/* ************************************************************************** */

#ifndef {{ HEADER_GUARD|snake }}_{{ FILE_NAME|snake }}_H
#define {{ HEADER_GUARD|snake }}_{{ FILE_NAME|snake }}_H

#include "{{ INCLUDE_PATH }}/api.h"

{% if OTHER_SCHEMA_INCLUDES is defined -%}
{% for t in OTHER_SCHEMA_INCLUDES -%}
#include "pxr/imaging/hd/{{ t }}Schema.h"
{% endfor -%}
{% else -%}
#include "pxr/imaging/hd/schema.h" {% endif %}

{% block additional_includes -%}
{% endblock additional_includes -%}

PXR_NAMESPACE_OPEN_SCOPE

//-----------------------------------------------------------------------------

#define {{ SCHEMA_NAME|upper }}_SCHEMA_TOKENS \
{%- if SCHEMA_TOKEN is defined %}
    ({{SCHEMA_TOKEN}}) \
{%- endif -%}
{%- if MEMBERS is defined -%}
{%- for name, type_name in MEMBERS %}
{% if SCHEMA_TOKEN is not defined or name != SCHEMA_TOKEN %}    ({{name}}) \{% endif %}{% endfor -%}
{%- endif -%}
{% if EXTRA_TOKENS is defined -%}
{% for t in EXTRA_TOKENS %}
    ({{t}}) \{% endfor -%}
{%- endif %}

TF_DECLARE_PUBLIC_TOKENS({{SCHEMA_NAME}}SchemaTokens, {{ LIBRARY_API }},
    {{ SCHEMA_NAME|upper }}_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------
{% block class_comment %}{% endblock class_comment %}
class {{ SCHEMA_NAME }}Schema : public HdSchema
{
public:
    {{ SCHEMA_NAME }}Schema(HdContainerDataSourceHandle container)
    : HdSchema(container) {}
{% if MEMBERS is defined %}
    //ACCESSORS
{% for name, type_name in MEMBERS %}
{% if ACCESSOR_COMMENTS is defined and name in ACCESSOR_COMMENTS %}{{ '\n'}}{% for l in (ACCESSOR_COMMENTS[name].split()|join(' ')|wordwrap(width=70)).split('\n')%}    // {{l ~ '\n'}}{% endfor %}
{%- endif %}    {{ LIBRARY_API }}
    {{ type_name}}{% if not type_name.endswith('Schema') %}Handle{% endif %} Get{{ name|capitalizeFirst }}();{% endfor %}

    // RETRIEVING AND CONSTRUCTING

    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    {{ LIBRARY_API }}
    static HdContainerDataSourceHandle
    BuildRetained(
{%- for name, type_name in MEMBERS %}
        const {{ type_name | underlyingDataSource }}Handle &{{ name }}{%if loop.last == False %},{% endif %}{% endfor %}
    );

    /// \class {{ SCHEMA_NAME }}Schema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:{% for name, type_name in MEMBERS %}
        {{ LIBRARY_API }}
        Builder &Set{{ name|capitalizeFirst }}(
            const {{ type_name | underlyingDataSource}}Handle &{{name}});{% endfor %}

        /// Returns a container data source containing the members set thus far.
        {{ LIBRARY_API }}
        HdContainerDataSourceHandle Build();

    private:
{% for name, type_name in MEMBERS %}        {{ type_name | underlyingDataSource}}Handle _{{name}};
{% endfor %}    };
{%- endif %}
{%- if GENERIC_BUILD_RETAINED is defined %}
    {{ LIBRARY_API }}
    static HdContainerDataSourceHandle
    BuildRetained(
        size_t count,
        const TfToken *names,
        const HdDataSourceBaseHandle *values);
{% endif -%}
{% block additional_methods %}{% endblock additional_methods -%}
{% if SCHEMA_TOKEN is defined %}

    /// Retrieves a container data source with the schema's default name token
    /// "{{ SCHEMA_TOKEN }}" from the parent container and constructs a
    /// {{SCHEMA_NAME}}Schema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    {{ LIBRARY_API }}
    static {{ SCHEMA_NAME }}Schema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);
{% endif -%}
{% if SCHEMA_TOKEN is defined %}
    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    {{ LIBRARY_API }}
    static const TfToken &GetSchemaToken();
{% endif -%}
{% if DEFAULT_LOCATOR is defined %}
    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    {{ LIBRARY_API }}
    static const HdDataSourceLocator &GetDefaultLocator();{% endif -%}
{%- if ADD_LOCATOR_FOR_EACH_MEMBER is defined and ADD_LOCATOR_FOR_EACH_MEMBER %}

    // DATA SOURCE LOCATORS
    //
    // Data source locators (relative to the prim-level data source)
    // where schema member is found by default.
{% for name, type_name in MEMBERS %}
    /// Data source locator for {{ name }}
    {{ LIBRARY_API }}
    static const HdDataSourceLocator &Get{{ name |capitalizeFirst  }}Locator();
{% endfor %}{% endif -%}
{%- if STATIC_LOCATOR_ACCESSORS is defined %}
{% for entry in STATIC_LOCATOR_ACCESSORS %}

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the {{entry[0]|lower}} data source can be found.
    /// This is often useful for checking intersection against the
    /// HdDataSourceLocatorSet sent with HdDataSourceObserver::PrimsDirtied.
    {{ LIBRARY_API }}
    static const HdDataSourceLocator &Get{{entry[0]}}Locator();{% endfor %}{% endif %}
{%- if STATIC_TOKEN_DATASOURCE_BUILDERS is defined %}
{% for entry in STATIC_TOKEN_DATASOURCE_BUILDERS %}
    /// Returns token data source for use as {{entry[0]|lower}} value.
    /// Values of...
{% for t in entry[1] %}    /// - {{SCHEMA_NAME}}SchemaTokens->{{ t }}
{% endfor %}    ///     ...will be stored statically and reused for future calls.
    {{ LIBRARY_API }}
    static HdTokenDataSourceHandle Build{{entry[0]|capitalize}}DataSource(
        const TfToken &{{entry[0]|lower}});{% endfor %}{% endif %}

};

PXR_NAMESPACE_CLOSE_SCOPE

#endif
